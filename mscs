#!/bin/sh
### BEGIN INIT INFO
# Provides:       mscs
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# chkconfig:      345 50 50
# Description:    Minecraft Server Control Script
### END INIT INFO

# This is a wrapper to msctl that imitates traditional mscs behaviour:
# uses the same default user, config file and location.

# Get executable name
PROG=$(basename $0)

# Load the mscs default file if it exists.
MSCS_DEFAULTS="/etc/default/mscs"
if [ -r $MSCS_DEFAULTS ]; then
  . $MSCS_DEFAULTS
  MSCS_ARGS="-c $MSCS_DEFAULTS "
fi

# gosu for easy step-down from root
# see: https://github.com/tianon/gosu
GOSU=${GOSU:-"/usr/local/bin/gosu"}

# Setup the default user name.
USER_NAME=${USER_NAME:-minecraft}

# Setup the default installation location.
LOCATION=${LOCATION:-"/opt/mscs"}

#Check permissions LOCATION and some top directories
if [ -n "$(find $(find $LOCATION -maxdepth 2) \! -user "$USER_NAME" -print -prune -o -prune)" ]; then
  echo "Note: Wrong owner of the directory, fixing"
  if [ "$(whoami)" = "root" ]; then
    chmod -R u+w /opt/mscs && chown -R minecraft:minecraft /opt/mscs
  else
    sudo chmod -R u+w /opt/mscs && chown -R minecraft:minecraft /opt/mscs
  fi
fi

# Setup the arguments to the msctl script.
MSCS_ARGS="-p $PROG -l $LOCATION $MSCS_ARGS $@"

# Run the msctl script.
if [ "$USER_NAME" = "$(whoami)" ]; then
  # Correct user
  msctl $MSCS_ARGS

elif [ "$(whoami)" = "root" ]; then
  # Running as root, step-down to user
  if [ -x $GOSU ]; then
    $GOSU $USER_NAME msctl $MSCS_ARGS

  else
    su $USER_NAME -p -c "msctl $MSCS_ARGS"
  fi

else
  # Running as other user, switch
  sudo -u $USER_NAME msctl $MSCS_ARGS
fi
